=== tests/cases/conformance/annotations/annotationDeclarationFieldInitializer8.ets ===
const enum E {
>E : E

    A,
>A : E.A

    B
>B : E.B
}

const a = 10
>a : 10
>10 : 10

const b = 20
>b : 20
>20 : 20

const c = "a"
>c : "a"
>"a" : "a"

const d = "b"
>d : "b"
>"b" : "b"

const e = true
>e : true
>true : true

const f = false
>f : false
>false : false

@interface Anno {
    a: number[] = [1 + 2, a + b, (E.A + E.B) / 3]
>a : number[]
>[1 + 2, a + b, (E.A + E.B) / 3] : number[]
>1 + 2 : number
>1 : 1
>2 : 2
>a + b : number
>a : 10
>b : 20
>(E.A + E.B) / 3 : number
>(E.A + E.B) : number
>E.A + E.B : number
>E.A : E.A
>E : typeof E
>A : E.A
>E.B : E.B
>E : typeof E
>B : E.B
>3 : 3

    b: Array<number> = [1 + 2, a + b, (E.A + E.B) / 3]
>b : number[]
>[1 + 2, a + b, (E.A + E.B) / 3] : number[]
>1 + 2 : number
>1 : 1
>2 : 2
>a + b : number
>a : 10
>b : 20
>(E.A + E.B) / 3 : number
>(E.A + E.B) : number
>E.A + E.B : number
>E.A : E.A
>E : typeof E
>A : E.A
>E.B : E.B
>E : typeof E
>B : E.B
>3 : 3

    c: Array<Array<number>> = [[1 + a * b / 3], [E.A + b], [a + E.A], []]
>c : number[][]
>[[1 + a * b / 3], [E.A + b], [a + E.A], []] : number[][]
>[1 + a * b / 3] : number[]
>1 + a * b / 3 : number
>1 : 1
>a * b / 3 : number
>a * b : number
>a : 10
>b : 20
>3 : 3
>[E.A + b] : number[]
>E.A + b : number
>E.A : E.A
>E : typeof E
>A : E.A
>b : 20
>[a + E.A] : number[]
>a + E.A : number
>a : 10
>E.A : E.A
>E : typeof E
>A : E.A
>[] : undefined[]

    d: string[] = ["a", (c + d)]
>d : string[]
>["a", (c + d)] : string[]
>"a" : "a"
>(c + d) : string
>c + d : string
>c : "a"
>d : "b"

    e: string[][] = [["a", (c + d)], ["b", "abc" + d], []]
>e : string[][]
>[["a", (c + d)], ["b", "abc" + d], []] : string[][]
>["a", (c + d)] : string[]
>"a" : "a"
>(c + d) : string
>c + d : string
>c : "a"
>d : "b"
>["b", "abc" + d] : string[]
>"b" : "b"
>"abc" + d : string
>"abc" : "abc"
>d : "b"
>[] : undefined[]

    f: Array<boolean> = [true, false, c === c, f || e]
>f : boolean[]
>[true, false, c === c, f || e] : boolean[]
>true : true
>false : false
>c === c : boolean
>c : "a"
>c : "a"
>f || e : true
>f : false
>e : true
}
