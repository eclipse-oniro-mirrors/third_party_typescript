=== tests/cases/conformance/es2018/es2018IntlAPIs.ts ===
// Sample from
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/supportedLocalesOf
const locales = ['ban', 'id-u-co-pinyin', 'de-ID'];
>locales : string[]
>['ban', 'id-u-co-pinyin', 'de-ID'] : string[]
>'ban' : "ban"
>'id-u-co-pinyin' : "id-u-co-pinyin"
>'de-ID' : "de-ID"

const options = { localeMatcher: 'lookup' } as const;
>options : { readonly localeMatcher: "lookup"; }
>{ localeMatcher: 'lookup' } as const : { readonly localeMatcher: "lookup"; }
>{ localeMatcher: 'lookup' } : { readonly localeMatcher: "lookup"; }
>localeMatcher : "lookup"
>'lookup' : "lookup"

console.log(Intl.PluralRules.supportedLocalesOf(locales, options).join(', '));
>console.log(Intl.PluralRules.supportedLocalesOf(locales, options).join(', ')) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>Intl.PluralRules.supportedLocalesOf(locales, options).join(', ') : string
>Intl.PluralRules.supportedLocalesOf(locales, options).join : (separator?: string) => string
>Intl.PluralRules.supportedLocalesOf(locales, options) : string[]
>Intl.PluralRules.supportedLocalesOf : (locales: string | string[], options?: { localeMatcher?: "lookup" | "best fit"; }) => string[]
>Intl.PluralRules : { (locales?: string | string[], options?: Intl.PluralRulesOptions): Intl.PluralRules; new (locales?: string | string[], options?: Intl.PluralRulesOptions): Intl.PluralRules; supportedLocalesOf(locales: string | string[], options?: { localeMatcher?: "lookup" | "best fit"; }): string[]; }
>Intl : typeof Intl
>PluralRules : { (locales?: string | string[], options?: Intl.PluralRulesOptions): Intl.PluralRules; new (locales?: string | string[], options?: Intl.PluralRulesOptions): Intl.PluralRules; supportedLocalesOf(locales: string | string[], options?: { localeMatcher?: "lookup" | "best fit"; }): string[]; }
>supportedLocalesOf : (locales: string | string[], options?: { localeMatcher?: "lookup" | "best fit"; }) => string[]
>locales : string[]
>options : { readonly localeMatcher: "lookup"; }
>join : (separator?: string) => string
>', ' : ", "

const nf = new Intl.NumberFormat('en-US', {
>nf : Intl.NumberFormat
>new Intl.NumberFormat('en-US', {    style: 'currency',    currency: 'USD',    maximumFractionDigits: 0,  }) : Intl.NumberFormat
>Intl.NumberFormat : { (locales?: string | string[], options?: Intl.NumberFormatOptions): Intl.NumberFormat; new (locales?: string | string[], options?: Intl.NumberFormatOptions): Intl.NumberFormat; supportedLocalesOf(locales: string | string[], options?: Intl.NumberFormatOptions): string[]; readonly prototype: Intl.NumberFormat; }
>Intl : typeof Intl
>NumberFormat : { (locales?: string | string[], options?: Intl.NumberFormatOptions): Intl.NumberFormat; new (locales?: string | string[], options?: Intl.NumberFormatOptions): Intl.NumberFormat; supportedLocalesOf(locales: string | string[], options?: Intl.NumberFormatOptions): string[]; readonly prototype: Intl.NumberFormat; }
>'en-US' : "en-US"
>{    style: 'currency',    currency: 'USD',    maximumFractionDigits: 0,  } : { style: string; currency: string; maximumFractionDigits: number; }

    style: 'currency',
>style : string
>'currency' : "currency"

    currency: 'USD',
>currency : string
>'USD' : "USD"

    maximumFractionDigits: 0,
>maximumFractionDigits : number
>0 : 0

  });
console.log(nf.formatRange(3, 5)); // "$3 â€“ $5"
>console.log(nf.formatRange(3, 5)) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>nf.formatRange(3, 5) : string
>nf.formatRange : (startRange: number, endRange: number) => string
>nf : Intl.NumberFormat
>formatRange : (startRange: number, endRange: number) => string
>3 : 3
>5 : 5

console.log(nf.formatRange(2.9, 3.1)); // "~$3"
>console.log(nf.formatRange(2.9, 3.1)) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>nf.formatRange(2.9, 3.1) : string
>nf.formatRange : (startRange: number, endRange: number) => string
>nf : Intl.NumberFormat
>formatRange : (startRange: number, endRange: number) => string
>2.9 : 2.9
>3.1 : 3.1

const formatter = new Intl.NumberFormat('de-DE', {
>formatter : Intl.NumberFormat
>new Intl.NumberFormat('de-DE', {    style: 'currency',    currency: 'EUR',  }) : Intl.NumberFormat
>Intl.NumberFormat : { (locales?: string | string[], options?: Intl.NumberFormatOptions): Intl.NumberFormat; new (locales?: string | string[], options?: Intl.NumberFormatOptions): Intl.NumberFormat; supportedLocalesOf(locales: string | string[], options?: Intl.NumberFormatOptions): string[]; readonly prototype: Intl.NumberFormat; }
>Intl : typeof Intl
>NumberFormat : { (locales?: string | string[], options?: Intl.NumberFormatOptions): Intl.NumberFormat; new (locales?: string | string[], options?: Intl.NumberFormatOptions): Intl.NumberFormat; supportedLocalesOf(locales: string | string[], options?: Intl.NumberFormatOptions): string[]; readonly prototype: Intl.NumberFormat; }
>'de-DE' : "de-DE"
>{    style: 'currency',    currency: 'EUR',  } : { style: string; currency: string; }

    style: 'currency',
>style : string
>'currency' : "currency"

    currency: 'EUR',
>currency : string
>'EUR' : "EUR"

  });
const startRange = 3500;
>startRange : 3500
>3500 : 3500

const endRange = 9500;
>endRange : 9500
>9500 : 9500

console.log(formatter.formatRangeToParts(startRange, endRange));
>console.log(formatter.formatRangeToParts(startRange, endRange)) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>formatter.formatRangeToParts(startRange, endRange) : Intl.NumberFormatPart[]
>formatter.formatRangeToParts : (startRange: number, endRange: number) => Intl.NumberFormatPart[]
>formatter : Intl.NumberFormat
>formatRangeToParts : (startRange: number, endRange: number) => Intl.NumberFormatPart[]
>startRange : 3500
>endRange : 9500

