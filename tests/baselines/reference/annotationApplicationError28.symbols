=== tests/cases/conformance/annotations/A.d.ets ===
export @interface Available {
>Available : Symbol(Available, Decl(A.d.ets, 0, 0))

    minApiVersion: string = "1";
>minApiVersion : Symbol(Available.minApiVersion, Decl(A.d.ets, 0, 29))
}

=== tests/cases/conformance/annotations/B.ets ===
import { Available } from "./A";
>Available : Symbol(Available, Decl(B.ets, 0, 8))

@Available({minApiVersion: 'OpenHarmony 20'})
>Available : Symbol(Available, Decl(B.ets, 0, 8))
>minApiVersion : Symbol(minApiVersion, Decl(B.ets, 2, 12))

export interface testI {
>testI : Symbol(testI, Decl(B.ets, 0, 32))

    @Available({minApiVersion: 'OpenHarmony 20'})
>Available : Symbol(Available, Decl(B.ets, 0, 8))
>minApiVersion : Symbol(minApiVersion, Decl(B.ets, 4, 16))

    prop1: string;
>prop1 : Symbol(testI.prop1, Decl(B.ets, 3, 24))

    @Available({minApiVersion: 'OpenHarmony 20'})
>Available : Symbol(Available, Decl(B.ets, 0, 8))
>minApiVersion : Symbol(minApiVersion, Decl(B.ets, 7, 16))

    f(): void;
>f : Symbol(testI.f, Decl(B.ets, 5, 18))

    @Available({minApiVersion: 'OpenHarmony 20'})
>Available : Symbol(Available, Decl(B.ets, 0, 8))
>minApiVersion : Symbol(minApiVersion, Decl(B.ets, 10, 16))

    get prop(): string;
>prop : Symbol(testI.prop, Decl(B.ets, 8, 14), Decl(B.ets, 11, 23))

    @Available({minApiVersion: 'OpenHarmony 20'})
>Available : Symbol(Available, Decl(B.ets, 0, 8))
>minApiVersion : Symbol(minApiVersion, Decl(B.ets, 13, 16))

    set prop(value: string);
>prop : Symbol(testI.prop, Decl(B.ets, 8, 14), Decl(B.ets, 11, 23))
>value : Symbol(value, Decl(B.ets, 14, 13))
}
